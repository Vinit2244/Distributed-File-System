-> I have a text file in which all the paths that are accessible are stored (so that even if server is turned off or goes down this infomation is retained).
-> On starting the server all these addresses are loaded into the buffer (2D char array).
-> A separate thread will be maintaining this file by writing the current state of the accessible paths buffer whenever some change has taken place in it (deletion or addition)





# Remaining to implement
-> When the server starts find two other servers and store the same files in them also
-> Tell all the other servers where the same file is stored to also update the files.
-> Implement better data structures to search and update in accessible paths array
-> Serve each request in it's own separate thread so we can move on to processing other requests
-> At last change the accessible paths to all the paths in the parent folder of the ss_to_copy folder to be accessible.
ex: if the director structure looks like this
abcd_folder
    ss_to_copy (folder)
    text1.txt
    folder1
    text2.txt
    folder2
efgh_folder
    ...

(Then text1.txt, folder1 (and all subsequent dirs in its tree), text2.txt and folder2 will be accessible to the client)


# Assumptions
-> relative path names always start with ./

#for NFS
-> On the requests made by NFS to SS it will receive ack when the task is completed
-> Give a unique token number to each request made to SS by NFS to identify which all tasks are completed by SS
-> Error codes and error handling remaining (file not present/access denied/permission denied etc.)






=> Merge checking and updating thread to one......................